syntax = "proto3";

package api;

import "restapi/annotations.proto";
import "example/proto/messages.proto";
import "google/protobuf/empty.proto";

option go_package = "./api;api";

service EchoService {
  option (restapi.service) = {
    base_path : "/api/v1"
  };

  rpc Echo(stream EchoRequest) returns (stream EchoResponse) {
    option (restapi.method) = {
      method : "GET"
      path : "/echo/:channel"
      request : "*"
      response : "*"
    };
  }

  rpc Ticker(TickerRequest) returns (stream TickerResponse) {
    option (restapi.method) = {
      method : "GET"
      path : "/ticker/:count"
      request : "*"
      response : "*"
    };
  }

  rpc Blackhole(EchoRequest) returns (google.protobuf.Empty) {
    option (restapi.method) = {
      method : "POST"
      path : "/blackhole/:channel"
      request : "*"
      response : "*"
    };
  }
}

service ExampleService {
  option (restapi.service) = {
    base_path : "/api/v1/example"
    auth : AUTH_TYPE_BEARER
    auth_scope : "JWT"
  };

  // POST new message to the server.
  rpc PostMessage(PostMessageRequest) returns (PostMessageResponse) {
    option (restapi.method) = {
      method : "POST"
      path : "/messages"
      request : "*"
      response : ".message"
    };
  }

  // GET message from the server.
  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse) {
    option (restapi.method) = {
      method : "GET"
      path : "/messages/:id"
      response : ".message"
    };
  }

  // DELETE message from the server.
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option (restapi.method) = {
      method : "DELETE"
      path : "/messages/:id"
    };
  }

  // LIST messages from the server.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (restapi.method) = {
      method : "GET"
      path : "/messages?:page&:per_page&:ids"
      response : ".messages"
    };
  }

  // PUT message to the server.
  rpc PutMessage(PutMessageRequest) returns (PutMessageResponse) {
    option (restapi.method) = {
      method : "PUT"
      path : "/messages/:message.id"
      request : ".message"
    };
  }

  // PATCH message to the server.
  rpc PatchMessage(PatchMessageRequest) returns (PatchMessageResponse) {
    option (restapi.method) = {
      method : "PATCH"
      path : "/messages/:message.id"
      request : ".message"
    };
  }
}
